>>
运算符	说 明
+	对两个操作数做加法运算
-	对两个操作数做减法运算
*	对两个操作数做乘法运算
/	对两个操作数做除法运算
%	对两个操作数做取余运算

>> 
逻辑运算符
逻辑运算符主要包括与、或、非等，它主要用于多个布尔型表达式之间的运算。

具体的表示符号如下表所示。

运算符	含义	说明
&&	逻辑与	如果运算符两边都为 True，则整个表达式为 True,否则为 False;如果左边操作数为 False，则不对右边表达式进行计算，相当于“且”的含义
||	逻辑或	如果运算符两边有一个或两个为 True，整个表达式为 True，否则为 False;如果左边为 True,则不对右边表达式进行计算，相当于“或”的含义
!	逻辑非	表示和原来的逻辑相反的逻辑

>>
比较运算符
比较运算符是在条件判断中经常使用的一类运算符，包括大于、小于、不等于、大于等于、小于等于等，具体的符号说明如下表所示。

运算符	说  明
== 	表示两边表达式运算的结果相等，注意是两个等号
!=	表示两边表达式运算的结果不相等
>	表示左边表达式的值大于右边表达式的值
<	表示左边表达式的值小于右边表达式的值
>=	表示左边表达式的值大于等于右边表达式的值
<= 	表示左边表达式的值小于等于右边表达式的值

>>
位运算符
所谓的位运算，通常是指将数值型的值从十进制转换成二进制后的运算，由于是对二进制数进行运算，所以使用位运算符对操作数进行运算的速度稍快。

位运算包括与、或、 非、左移、右移等，具体的表示符号如下表所示。
运算符	说 明
&	按位与。两个运算数都为 1，则整个表达式为 1，否则为 0;也可以对布尔型的值进行比较，相当于“与”运算，但不是短路运算
|	按位或。两个运算数都为 0，则整个表达式为 0，否则为 1;也可以对布尔型的值进行比较，相当于“或”运算，但不是短路运算
~	按位非。当被运算的值为 1 时，运算结果为 0;当被运算的值为 0 时，运算结果为 1。该操作符不能用于布尔型。对正整数取反，则在原来的数上加 1，然后取负数；对负整数取反，则在原来的数上加 1，然后取绝对值
^	按位异或。只有运算的两位不同结果才为 1，否则为 0
<<	左移。把运算符左边的操作数向左移动运算符右边指定的位数，右边因移动空出的部分 补 0
>>	有符号右移。把运算符左边的操作数向右移动运算符右边指定的位数。如果是正值，左侧因移动空出的部分补 0;如果是负值，左侧因移动空出的部分补 1
>>> 	无符号右移。和 >> 的移动方式一样，只是不管正负，因移动空出的部分都补 0
在上面列出的运算符中比较常用的是左移运算符和右移运算符，左移 1 位相当于将操作数乘 2，右移 1 位相当于将操作数除 2。

例子：
【实例 4】使用位运算符计算 2 的立方。

根据题目要求，计算 2 的立方就是将 2 向左移两位得到的结果，代码如下。
纯文本复制
class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("2的立方为："+(2<<2));
    }
}

>>结果为 8

>> 三元运算符
在 C# 语言中三元运算符只有一个，具体的语法形式如下。
布尔表达式 ? 表达式 1: 表达式 2
需要注意的是，在三元运算符中表达式 1 和表达式 2 的结果的数据类型要兼容。

>>赋值运算符

=	x=y，等号右边的值给等号左边的变量，即把变量 y 的值赋给变量 x
+=	x+=y，等同于 x=x+y
-=	x-=y，等同于 x=x-y
*=	x*=y，等同于 x=x*y
/=	x/=y，等同于 x=x/y
%=	 x%=y，等同于 x=x%y，表示求 x 除以 y 的余数
++	x++ 或 ++x，等同于 x=x+1
--	x-- 或 --x，等同于 x=x-1

>>需要注意的是，++ 和 -- 运算符放在操作数前和操作数后是有区别的，如果放在操作数前，需要先将操作数加 1 或减 1，然后再与其他操作数进行运算；如果放在操作数后，需要先与其他操作数进行运算，然后操作数自身再加 1。

关键点：>> << >>> ^ 
