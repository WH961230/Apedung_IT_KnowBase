>> 为了保证字段的安全性，还能选择省去 get 访问器或 set 访问器。
定义属性的语法形式如下。
public    数据类型    属性名
{
    get
    {
        获取属性的语句块;
        return 值;
    }
    set
    {
        设置属性得到语句块;
    }
}
1) get{}
get 访问器，用于获取属性的值，需要在 get 语句最后使用 return 关键字返回一个与属性数据类型相兼容的值。

若在属性定义中省略了该访问器，则不能在其他类中获取私有类型的字段值，因此也称为只写属性。
2) set{}
set 访问器用于设置字段的值，这里需要使用一个特殊的值 value，它就是给字段赋的值。

在 set 访问器省略后无法在其他类中给字段赋值，因此也称为只读属性。

通常属性名的命名使用的是 Pascal 命名法，单词的首字母大写，如果是由多个单词构成，每个单词的首字母大写。

由于属性都是针对某个字段赋值的，因此属性的名称通常是将字段中每个单词的首字母大写。例如定义了一个名为 name 的字段，属性名则为 Name。


>>简写

public    数据类型    属性名{get;set;}

>>简化后的:

public int Id{get; set;}

如果使用上面的方法来设置属性，则不需要先指定字段。如果要使用自动属性的方式来设置属性表示只读属性，直接省略 set 访问器即可。
只读属性可以写成如下形式。

public int Id{get;}=1;

这里相当于将 Id 属性的值设置成 1，并且要以分号结束。但是，在使用自动生成属性的方法时不能省略 get 访问器，如果不允许其他类访问属性值，则可以在 get 访问器前面加上访问修饰符 private，代码如下。

public int Id{private get; set;}

这样，Id 属性的 get 访问器只能在当前类中使用。

关键点：set访问器使用value作为特殊的值,public 数据类型 属性名{get;set;}，public 数据类型 属性名{private get;}=1当前类使用
